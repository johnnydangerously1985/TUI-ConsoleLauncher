apply plugin: 'com.android.application'
android {
    compileSdkVersion 27
    buildToolsVersion '28.0.3'
    dexOptions {
    }

    defaultConfig {
        applicationId "ohi.andre.consolelauncher"

        minSdkVersion 14
        targetSdkVersion 27
        flavorDimensions "default"

        versionName "v6.15"
        versionCode 205
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }
    productFlavors {
        fdroid {
        }
        playstore {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependencies {
        implementation 'com.android.support:appcompat-v7:27.1.1'
    }
    lintOptions {
        checkReleaseBuilds false
    }
    android.applicationVariants.all { variant ->
        def formattedDate = new Date().format('hh.mm')

        variant.outputs.all {
            outputFileName = "./${variant.versionName}/${variant.applicationId}_${variant.getFlavorName()}_${variant.versionCode}_${formattedDate}.apk"
        }
    }
}
dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.6'
    implementation 'com.jayway.jsonpath:json-path:2.4.0'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'it.andreuzzi:CompareString2:1.0.9'
}
import org.jetbrains.exposed.dao.id.IntIdTable
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.transactions.transaction
import kotlin.random.Random

object ATable: IntIdTable("A") {
    val b = text("b")
    val c = integer("c")
}

fun main() {
    val db = Database.connect("jdbc:sqlite:test.db", "org.sqlite.JDBC")
    transaction {
        SchemaUtils.createMissingTablesAndColumns(ATable)
        if (ATable.selectAll().count() == 0L) {
            fillATable()
        }
    }

    transaction {
        ATable.slice(ATable.b, ATable.c.max()).selectAll().groupBy(ATable.b).toList().forEach {
            println(it)
        }

        val alias = ATable.slice(ATable.b, ATable.c.max()).selectAll().groupBy(ATable.b).alias("alias")
        alias.join(ATable, JoinType.LEFT, alias[ATable.b], ATable.b, additionalConstraint = {
            alias[ATable.c.max()] eq ATable.c
        }).selectAll().toList().forEach {
            println(it)
        }
    }
}
val alias = atable . slice atable b atable b c, max alias . join atable jpin type
val = database connect transaction schemautils fun main val transiction import jet brains
wrkm. 'njuj ntvcnf ghjdthbnm yflt;lyjcnm ghjwtleh htpthd yjuj rjgbhjjdfybz b djccnfyjdktybt lkz mfps kfyya  d ghjkb;tubb 0.1.3. tecnjdfz chtlf  ghjwtlehs ntcnbhjdfybz  gjlkujnjdrf gthtl rf;ksv ntcntjv cjolkfdfjc yjdsq fecnjq afqk mfps kfyyfs lkz ntcnbhjdfybz  ghjdthrf cjlth;bvjunj ljz djccnfyjdktybzm,fpsm lfyys ghjdhrf '

val bValues = ('A'..'Z').map { it.toString() }

fun fillATable() {
    with(ATable) {
        batchInsert(0..10) {
            this[b] = bValues[Random.nextInt(0,bValues.size)]
            this[c] = Random.nextInt(0,100)
        }
    }
}
